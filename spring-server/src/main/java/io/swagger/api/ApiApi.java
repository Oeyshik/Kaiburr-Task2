/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.32).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Server;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-09-16T12:32:01.714Z")

@Validated
@Api(value = "api", description = "the api API")
@RequestMapping(value = "")
public interface ApiApi {

    @ApiOperation(value = "Find servers by name", nickname = "apiServersFindByNameGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/servers/findByName",
        method = RequestMethod.GET)
    ResponseEntity<Void> apiServersFindByNameGet(@NotNull @ApiParam(value = "Name to search for", required = true) @Valid @RequestParam(value = "name", required = true) String name);


    @ApiOperation(value = "Retrieve all servers", nickname = "apiServersGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/servers",
        method = RequestMethod.GET)
    ResponseEntity<Void> apiServersGet();


    @ApiOperation(value = "Delete a server by ID", nickname = "apiServersIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/servers/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> apiServersIdDelete(@ApiParam(value = "ID of the server to delete",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Retrieve a server by ID", nickname = "apiServersIdGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/servers/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Void> apiServersIdGet(@ApiParam(value = "ID of the server to retrieve",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Update a server by ID", nickname = "apiServersIdPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/servers/{id}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> apiServersIdPut(@ApiParam(value = "ID of the server to update",required=true) @PathVariable("id") String id,@ApiParam(value = "Updated server object" ,required=true )  @Valid @RequestBody Server server);


    @ApiOperation(value = "Create a new server", nickname = "apiServersPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/api/servers",
        method = RequestMethod.POST)
    ResponseEntity<Void> apiServersPost(@ApiParam(value = "Server object to be created" ,required=true )  @Valid @RequestBody Server server);

}
